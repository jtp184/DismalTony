#!/usr/bin/env ruby

require 'bundler/setup'
require 'psych'
require 'pp'
require 'dismaltony'
require 'ParseyParse'
require 'ParseyParse/cache'

Dir.entries('lib/dismaltony/directive_helpers')
   .select! { |f| /(\w*)\.rb/i.match?(f) }
   .map! { |f| /(\w*)\.rb/.match(f)[1] }
   .each { |f| require "dismaltony/directive_helpers/#{ f }" }


Dir.entries('lib/dismaltony/directives')
   .select! { |f| /(\w*)\.rb/i.match?(f) }
   .map! { |f| /(\w*)\.rb/.match(f)[1] }
   .each { |f| require "dismaltony/directives/#{ f }" }

Dir.entries('lib/dismaltony/parsing_strategies')
   .select! { |f| /(\w*)\.rb/i.match?(f) }
   .map! { |f| /(\w*)\.rb/.match(f)[1] }
   .each { |f| require "dismaltony/parsing_strategies/#{ f }" }

ParseyParse.configure do |conf|
  conf[:cache] = begin
    ParseyParse::YAMLCache.load_from('tmp/cache.yml')
    # ParseyParse::RedisCache.new(redis_config: {db: 1})
  rescue
    ParseyParse::Cache.new
  end
  
  conf[:disable_tf] = !File.exists?(conf[:syntaxnet_path] + '/' + conf[:script_path])
end

@db = begin
  # DismalTony::YAMLStore.load_from('tmp/tony.yml')
  DismalTony::RedisStore.new
rescue
  DismalTony::DataStore.new
end

@test_strategies = [
  DismalTony::ParsingStrategies::ComprehendTopicStrategy,
  DismalTony::ParsingStrategies::ComprehendKeyPhraseStrategy,
  DismalTony::ParsingStrategies::ComprehendSyntaxStrategy,
  DismalTony::ParsingStrategies::WatsonToneStrategy
]

DismalTony.vi = DismalTony::VIBase.new(
  :data_store => @db,
  :user => @db.users&.first
  )

@last = nil

@current_state = -> { DismalTony.vi.user.state }.call
@reset_state = -> { @db.update_user(DismalTony.vi.user[:uuid]) { |u| u.state.merge! DismalTony::ConversationState.new } }.call

def self.interactive(debug = false)
  puts
  loop do
    print "[#{DismalTony::Formatter.emoji('laptop')}  ]: "
    inp = gets.chomp
    puts
    res = DismalTony.(inp)
    puts
    @last = res if debug
  end
end

def self.Query(q)
  k = DismalTony::QueryResolver.create_query(q)
  k.parsed_results = @test_strategies.map { |b| b.(q) }
  k
end

# (If you use this, don't forget to add pry to your Gemfile!)
require 'pry'
Pry.start

# require 'irb'
# IRB.start
