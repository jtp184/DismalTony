#!/usr/bin/env ruby

require 'colorize'
require 'optparse'
require 'ostruct'
require 'psych'
require 'open-uri'

require 'pry'

require 'ParseyParse'
require 'ParseyParse/cache'
require 'dismaltony'

require 'dismaltony/directives/core'
require 'dismaltony/directives/conversation'
require 'dismaltony/directives/weather'

module DismalTony
	module CLI

		attr_accessor :__

		class << self
			attr_accessor :__
		end

		@__ = OpenStruct.new
		@opt = OptionParser.new do |opts|
			opts.on('-i', '--interactive', 'Engage DismalTony in a REPL') do |q|
				__[:interactive] = true
			end

			opts.on('-t', '--tony-cache=FILE', 'Select a file to read from for the DismalTony cache') do |t|
				__[:tony_cache] = t
			end

			opts.on('-p', '--parse-cache=FILE', 'Select a file to read from for the ParseyParse cache') do |pc|
				__[:parsey_cache] = pc
			end

			opts.on('-l', '--load-file=FILE', 'Select a Ruby file to read from, to add Directives') do |l|
				__[:load_file] = l
			end

			opts.on('-r', '--remote=ADDR', 'choose a URL to post hooks to instead of locally running') do |r|
				__[:remote_addr] = URI(r)
			end

			opts.on('-s', '--syntaxnet=PATH', 'the path for the Syntaxnet scripts') do |s|
				__[:syntaxnet_path] = s
			end
		end.parse!

		def self.configure_parsey
			khash = parsey_cache? ? ParseyParse::YAMLCache.load_from(__[:parsey_cache]) : ParseyParse::Cache.new
			ParseyParse.configure do |conf|
				conf[:cache] = khash
				conf[:syntaxnet_path] = __[:syntaxnet_path] if __[:syntaxnet_path]
				conf[:disable_tf] = !File.exists?(conf[:syntaxnet_path] + '/' + conf[:script_path])
			end
		end

		def self.configure_vi
			db = tony_cache? ? DismalTony::YAMLStore.load_from(__[:tony_cache]) :	DismalTony::DataStore.new

			DismalTony.vi = DismalTony::VIBase.new(
				:data_store => db,
				:user => db.users&.first
				)
		end

		def self.tony_cache?
			__[:tony_cache]
		end

		def self.parsey_cache?
			__[:parsey_cache]
		end

		def self.check_interactive_options(str)
			case str
			when /^exit$/i, /^quit$/i
				exit
			when /^pry$/i, /^console$/i, /^ruby$/i
				Pry.start
				exit
			when /^list-directives$/i
				DismalTony.().directives.each { |d| puts d.name }
				true
			when /^list-parsed$/i
				ParseyParse.known.keys.each { |k| puts k }
			else
				nil
			end
		end

		def self.interactive(debug = false)
			puts
			loop do
				print "[#{DismalTony::EmojiDictionary['laptop']}  ]: "
				inp = gets.chomp
				puts
				if check_interactive_options(inp)

				else
					begin
						res = DismalTony.(inp)
						@last_evaluated = res if debug
					rescue ParseyParse::TensorFlowDisabledError
						DismalTony.().say("~e:frown I'm sorry, I can only answer preloaded queries")
					end
				end
				puts
			end
		end

		def self.preload
			load_homefile if check_homefile
			load __[:load_file] if __[:load_file]
			tcs = ['./tmp/tony.yml', './tmp/tony.yaml', './tony.yml', './tony.yaml', Dir.home + '/tony.yml', Dir.home + '/tony.yaml']
			tcs.each do |tc|
				__[:tony_cache] ||= tc if File.exists?(tc)
			end

			pcs = ['parsey', 'cache']
			pcs.map! { |a| ["./tmp/#{a}.yml", "./tmp/#{a}.yaml", "./#{a}.yml", "./#{a}.yaml"]}
			pcs = pcs.flatten
			pcs.each do |pc|
				__[:parsey_cache] ||= pc if File.exists?(pc)
			end
		end

		def self.load_homefile
			__ = Psych.load(File.read(Dir.home + '/.tony'))
		end

		def self.check_homefile
			if File.exists?(Dir.home + '/.tony')
				Psych.load(File.read(Dir.home + '/.tony'))
			else
				nil
			end
		end

		def self.save_homefile
			File.open(Dir.home + '/.tony', 'w+') { |fi| fi << Psych.dump(__) }
		end

		def self.call
			preload
			configure_parsey
			configure_vi

			if __[:interactive]
				interactive
			elsif ARGV.empty?

			else
				DismalTony.(ARGV.join(" "))
			end
			save_homefile if check_homefile
		end

		def self.options
			@__
		end
	end
end
DismalTony::CLI.()